using System;
using System.Text.Json.Serialization;
using Redis.OM.Contracts;

namespace Redis.OM.Modeling
{
    /// <summary>
    /// A vectorizer attribute.
    /// </summary>
    public abstract class VectorizerAttribute : JsonConverterAttribute
    {
        /// <summary>
        /// Gets the number of bytes per vector.
        /// </summary>
        public int BytesPerVector => VectorType == VectorType.FLOAT32 ? 4 * Dim : 8 * Dim;

        /// <summary>
        /// Gets the vector Type generated by the vectorizer.
        /// </summary>
        public abstract VectorType VectorType { get; }

        /// <summary>
        /// Gets the vector dimension of the vectors generated by the vectorizer.
        /// </summary>
        public abstract int Dim { get; }

        /// <summary>
        /// Converts the provided object to a vector.
        /// </summary>
        /// <param name="obj">the object to convert.</param>
        /// <returns>A byte array containing the vectorized data.</returns>
        public abstract byte[] Vectorize(object obj);
    }

    /// <summary>
    /// Method for converting a field into a vector.
    /// </summary>
    /// <typeparam name="T">The type.</typeparam>
#pragma warning disable SA1402
    public abstract class VectorizerAttribute<T> : VectorizerAttribute
    where T : class
#pragma warning restore SA1402
    {
        /// <summary>
        /// Gets the vectorizer for this attribute.
        /// </summary>
        /// <returns>The vectorizer.</returns>
        public abstract IVectorizer<T> Vectorizer { get; }

        /// <summary>
        /// Creates the json converter fulfilled by this attribute.
        /// </summary>
        /// <param name="typeToConvert">The type to convert.</param>
        /// <returns>The Json Converter.</returns>
        public override JsonConverter? CreateConverter(Type typeToConvert)
        {
            return new VectorJsonConverter<T>(this);
        }
    }
}